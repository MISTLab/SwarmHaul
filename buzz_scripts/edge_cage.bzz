include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/debug.bzz"



Pushed_obj_pos = {}

function init() 
{ 
cagers=swarm.create(2)
task = stigmergy.create(3)

}



function step()
{


}






































function gradient()
{
    task_size = task.size()
    if(task_size - last_size)
    {
      i = 1
      while((i-1)<(task_size - last_size)) 
      {
        bidding_timer[last_size+i] = 0
        i = i + 1
      }
    }
    cnt = 1
    while(cnt-1 < task_size)
    { 
      if(task.get(cnt).bid)
      {
      if ((not bidding_timer[cnt]%k) and (not TASK))
      {
      current_pose = math.vec2.new(pose.position.x,pose.position.y)
      current_bid = task.get(cnt).bid
      dir = task.get(cnt).dir
      my_bid = math.vec2.dis(task.get(cnt).pos,current_pose)
      dir_axis = task.get(cnt).dir_axis
      #log(id,": bid",current_bid," : my_bid",my_bid," :dir",dir," :dir_axis",dir_axis)
      if (current_bid>my_bid)
         {
           task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=dir_axis,.bid=my_bid})
         }
         bidding_timer[cnt] = bidding_timer[cnt] + 1
      }
      else 
         {
           bidding_timer[cnt] = bidding_timer[cnt] + 1
         }
      
      if (bidding_timer[cnt] == bidding_time)
      {
        if (task.get(cnt).id == id)
        {
          if(not TASK)
          {
          TASK = 1
          POS_DES = task.get(cnt).pos
          DIR = task.get(cnt).dir
          DIR_AXIS = task.get(cnt).dir_axis
          #SWARM_SIZE = SWARM_SIZE + 1
          #log(id," :POS_DES",POS_DES.x ,":",POS_DES.y," : DIR_AXIS",DIR_AXIS," :DIR",DIR)
          }
          else
          {
            task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=task.get(cnt).dir_axis,.bid=NIL})
            task.put(task.size()+1,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=task.get(cnt).dir_axis,.bid=100000})
          }
        }
      }
      }
      cnt = cnt + 1
    }  
    last_size = task_size
}
