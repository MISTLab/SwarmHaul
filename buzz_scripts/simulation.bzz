include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/debug.bzz"
include "includes/paths.bzz"

# Constants
# Note make sure INTER_ROBOT_CAGING_DIS > INTER_WP_TOLERENCE > SAFETY_DISTANCE,

SAFETY_DISTANCE = 35
HARMON_A0 = 0.0
HARMON_K = 1.0/50.0
LEFT_TARGET_CONE_ANGLE = 0.03
RIGHT_TARGET_CONE_ANGLE = 0.03
NORMAL_CAGE_ANGLE = 0.17
TOUCHING_OBS_THRESH = 0.7
INTER_WP_TOLERENCE = 0.5
INTER_ROBOT_CAGING_DIS=0.45
RANGE_OF_PROXMITY = 0.3
total_bots = 50
RANDOM_SEED_SET=0
RANDOM_SEED_SET_VAR=0



# Global Vaiables 
# Step time variable 
time = 0 

allow_corner_pass = 0

M_CAGING_TASK = -1

I_was_in_corner = 0
# State switch beteeen caging and pushing+Rotating
flag =1
# Flag to determine if centroid computation has to be done, done after the robots reaching a WP. 
FLAG = 0
# position of the pushed object. 
Pushed_obj_pos = {}
# Records the pervious task size, to identify the avilability of new tasks. 
last_size = 0
# List of positions on the left and right side, used for edge following and reaching the assigned target.
left_branch = {.1={.x=0,.y=0}}
right_branch = {.1={.x=0,.y=0}}

left_branch_list ={}
right_branch_list={}

branch_list_check ={}
closest_nei = NIL 

BRANCH = 0
# Target to reach, used for estimating the cone to stop caging. 
target = {.x = 4,.y = 4}
# list of positions beinging copied from either left or right branch with the last position. 
target_array = {.1={.x=0,.y=0}}
# Current waypoint that the robot is performing to edge following and reaching assigned target.(only used in Caging)
x= 2
# Flag to determine if the robot is performing a task, used to determine if the robot is performing something, includes, following edge, pushing, rotating. 
TASK = 0

# Total number of robots used for looping and getting centroid coordinates.

# Local target assigned for the robots during pushing and rotation. 
POS_DES={.x=0,.y=0}
# Timer that makes the robot wait before going into next waypoint.
Wait_time_for_next_task = 0

# barrier broadcast to bypass stigmergy 
barrier_broadcast = 0

# Logging data 
effective_pusher = 0
effective_rotater = 0 
EXPERIMENT_DONE = 0
centroid_table ={}



function init() { 
  # Swarm containing all the robots, used to execute gardient algorithm. (Robots leave on joing cagers or pushers)
  s = swarm.create(1)
  s.join()
  # All the robots that have reached the caging goal will be in this swarm. (Robots leave on joing cagers or pushers)
  cagers=swarm.create(2)
  # Stigmergy to stop caging. Once two robots reach the calulated target cone.
  barrier_cage= stigmergy.create(5)
  # Indicates the local goals in caging, identifies if the robot has reached its target while pushing and rotating.
  task = stigmergy.create(3)
  # K from the interval in gradient algorithm.
  k = 5
  # bidding max time.
  bidding_time = 70
  # List of timers for all caging tasks. 
  bidding_timer={}
  # The first task to initiate caging.
  task.put(1,{.id=id,.pos={.x=0,.y=0},.bid=100000,.branch = 0})
  # List of robots that have completed pushing or rotating.
  barrier_array = {.1=100000} 
  # Current Waypoint pursued by the robot while pushing and rotating. 
  TASK_NUM = 0
  # All the robots that are pushing the object (leaves it when the barrier is satisfied)
  pushers=swarm.create(4)
  # All the robots in rotating mode (leaves it when the barrier is satisfied.)
  rotaters= swarm.create(5)
  # Sharing the path thought this stig.  
  barrier = stigmergy.create(20)
  # Number of robots that have reached the target for pushing and rotating.
  barrier2 = stigmergy.create(10)
  # After caging, to find the size of the robots. 
  swarm_size = 0
   # = stigmergy.create(21)
  # Calculating the centroid after pushing after every waypoint. 
  centroid = stigmergy.create(23)

  task.onconflict(function (k,local,remote) {	
  		# Resolving bid conficts
      if(local.data.pos.x == remote.data.pos.x and local.data.pos.y == remote.data.pos.y){
        # log("[",id,"] Confict with same tas pos for task ", k)
        if(remote.data.bid <=local.data.bid){
          return remote
        }
    		else{
          return local
        }
      }
      else{
        log("[",id,"] Conflict of different task ids")
        # Resolving Task id conflicts
        if(local.robot < remote.robot){
          if(id != remote.robot){
          log("[",id,"] winner local for ",k," local robot ", local.robot)

            return local
          }
          else{
            task.put(k+1, remote.data)
            log("[",id,"] winner local for ",k," local robot ", local.robot, " remote creted as new task")
            return local
          }
        }
        else{
          if(id != local.robot){
            log("[",id,"] winner remote for ",k," local robot ", remote.robot)

            return remote
          }
          else{
            task.put(k+1, local.data)
            log("[",id,"] winner remote for ",k," local robot ", local.robot, " remote creted as new task")

            return remote
          } 
        }
      }
    }
  )

  barrier.onconflict(function (k,local,remote) { 
      if(remote.robot<=local.robot)
      {
        return remote
      }
      else 
      {
        return local
      }
        
    }
  )


  centroid.onconflict(function (k,local,remote) { 
    if((local.data) and (not remote.data))
    {
     return local
    }
    else if((not local.data) and (remote.data))
    {
     return remote
    } 
    
    }
  )



  barrier2.onconflict(function (k,local,remote) { 
      if(local.data < remote.data){
        check_and_add_barrier(local.robot,barrier_array)
        check_and_add_barrier(remote.robot,barrier_array)
        return remote
      }
      else if(local.data > remote.data){
        check_and_add_barrier(local.robot,barrier_array)
        check_and_add_barrier(remote.robot,barrier_array)
        return local
      }

      if(local.data == remote.data){
        check_and_add_barrier(local.robot,barrier_array)
        check_and_add_barrier(remote.robot,barrier_array)
        return remote
      }                                          

    }
  )

  neighbors.listen("BB",
    function(vid, value, rid) {
      barrier_broadcast = 1
    }
  )

}



function step(){
  if(RANDOM_SEED_SET != 0 and RANDOM_SEED_SET_VAR == 0){
    RANDOM_SEED_SET_VAR = 1
    math.rng.setseed(RANDOM_SEED_SET)
  }
  time = time + 1 
  var obstacle_vector = obs_vec()
  
  swarm_size = Cagers_SwarmSize + Pushers_SwarmSize + Rotators_SwarmSize

  if(flag){
    debug.print("[",id,"] [first]Pos (",pose.position.x,",",pose.position.y,") obs cnt", obstacle_vector.cnt, " len ", obstacle_vector.len, " ang ", obstacle_vector.ang," going to (",POS_DES.x,",",POS_DES.y,") WP ", x," Branch ",BRANCH)
    if ((s.in()) and (barrier_cage.size() < 2)){
      s.exec(gradient)
    }
    if(cagers.in()){  
      if(barrier_cage.size() >= 2){
        log("caging_done")
        cagers.leave()
        flag = 0
        if(barrier.size() <=1){
          EXPERIMENT_DONE = 1
        }
        else{
          pushers.join()
          # swarm_size.put(id,1)
          TASK_NUM = 2
          TASK = 1
          POS_DES = math.vec2.add({.x = barrier.get(TASK_NUM).x - barrier.get(TASK_NUM - 2).x,.y = barrier.get(TASK_NUM).y - barrier.get(TASK_NUM - 2).y},pose.position)
          #log(id,POS_DES.x,":",POS_DES.y)
          #log(id,pose.position.x,":",pose.position.y)
          n = find_nei_in_set()
          yaw = barrier.get(TASK_NUM).yaw-barrier.get(TASK_NUM-2).yaw
        }
      }
      else if(size(right_branch_list) > 3 and size(left_branch_list) > 3){
        var m_ret = task_checker(pose.position)
      }
    }

    if(s.in()){
      if(TASK){
        show_colored_trajectory()
        var move_vec = obtain_local_vec_to_target(POS_DES,pose.position,pose.orientation.yaw)
         vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 30)
         var cmd_vel = LCA(vector_to_target)
         #var cmd_vel = avoid_nei_using_potential(move_vec)
         #cmd_vel = math.vec2.scale(cmd_vel,5)
        goto(cmd_vel.x, cmd_vel.y)
        if(target_array[x]){
          if((math.vec2.dis(POS_DES,pose.position)<INTER_WP_TOLERENCE)){
            log(x,":",id,": x",POS_DES.x,": y",POS_DES.y)
            x=x+1
            if(target_array[x]){
              POS_DES = target_array[x]
            }
          }
        }
        else if( x > (size(target_array)-1) ){

          debug.print(" Distance: ", (math.vec2.dis(POS_DES,pose.position)), " obs len ", obstacle_vector.len, " cnt ", obstacle_vector.cnt, "Pos (",pose.position.x,",",pose.position.y,") going to (",POS_DES.x,",",POS_DES.y,") WP: ",x, "Branch ", BRANCH)
          if((math.vec2.dis(POS_DES,pose.position) < 0.05) or (obstacle_vector.len > NORMAL_CAGE_ANGLE) or allow_corner_pass == 1 or obstacle_vector.cnt > TOUCHING_OBS_THRESH){
            # Corner case detection. 
            var allow_correner_Case = 0
            if(task.size() > 1) allow_correner_Case = Check_for_robots_in_previous_dir()
            if(obstacle_vector.cnt < TOUCHING_OBS_THRESH and allow_correner_Case == 0  and I_was_in_corner != -1){
              I_was_in_corner = 1
            }
            #check_for_barrier(pose.position)
            log("[",id,"]",":",POS_DES.x,":",POS_DES.y)
            log("[",id,"]","obs.len:",obstacle_vector.len,"obs.ang:",obstacle_vector.ang," cnt ", obstacle_vector.cnt)
            # TASK = 0
            POS_DES={.x=0,.y=0}

            # Compute the neighbors global pos 
           if (closest_nei == NIL){ 
                closest_nei = {.id=-1, .data={.distance=10000, .azimuth=0}}
	            neighbors.foreach(function(rid,data){
	              if(data.distance <  closest_nei.data.distance){
	                closest_nei.id = rid
	                closest_nei.data = data
	              }
	            })
            }
            var global_nei_pos = math.vec2.new(pose.position.x,pose.position.y)
            var nei_rotated_pos = math.vec2.newp(closest_nei.data.distance/100, closest_nei.data.azimuth)
            nei_rotated_pos = math.vec2.rotate(nei_rotated_pos, pose.orientation.yaw)
            global_nei_pos = math.vec2.add(global_nei_pos,nei_rotated_pos)
            # log("[",id,"] nei global pos (",global_nei_pos.x,",",global_nei_pos.y,"), nei id: ", closest_nei.id)
            var circum_distance = math.abs(global_nei_pos.x-pose.position.x) + math.abs(global_nei_pos.y-pose.position.y)
            log("[",id,"] curcum dist ", circum_distance, " with ", closest_nei.id)
            var cur_inter_cage_dis = circum_distance - INTER_ROBOT_CAGING_DIS
            # var nei_ang_limited = LimitAngle(math.vec2.angle(nei_rotated_pos))
            # log("[",id,"] cur inter cage dis  ", cur_inter_cage_dis," ANg with nei ", nei_ang_limited)
            debug.rays.add(0,0,255, nei_rotated_pos.x*100, nei_rotated_pos.y*100, 0.0)
            if( cur_inter_cage_dis > 0.06 and cur_inter_cage_dis < 0.5 and obstacle_vector.cnt > TOUCHING_OBS_THRESH){
              # I will not take it as a corner case, if I have 0 obs reading during inter distance correction.
              I_was_in_corner = -1
              var obs_vec_cur = math.vec2.newp(obstacle_vector.len, obstacle_vector.ang)
              var obs_orth = math.vec2.rotate(obs_vec_cur, math.pi/2)
              var obs_orth2 = math.vec2.rotate(obs_orth, math.pi*(6/4))
              # var ortho_Limited = LimitAngle(math.vec2.angle(obs_orth))
              var previous_point = {.x=0,.y=0}
              if(BRANCH == 1){
                if(size(left_branch) > 2)  
                  previous_point = left_branch[size(left_branch)-2]
                else{
                  previous_point = task.get(1).pos
                }
              }
              else {
                if(size(right_branch) > 2){
                  previous_point = right_branch[size(right_branch)-2]  
                }
                else{
                  previous_point = task.get(1).pos
                }
              }
              previous_point = math.vec2.sub(previous_point,pose.position)
              # previous_point = math.vec2.rotate(previous_point,-pose.orientation.yaw)
              log("!!!![",id,"] Applying inter robot correction")              
              # var rotated_obs_orth = math.vec2.rotate(obs_orth, -pose.orientation.yaw)
              # var rotated_obs_orth2 = math.vec2.rotate(obs_orth2, -pose.orientation.yaw)
              if(math.vec2.dis(previous_point, obs_orth2) < math.vec2.dis(previous_point, obs_orth)){
                obs_orth = obs_orth2
                # rotated_obs_orth = rotated_obs_orth2
              }
              var rotated_obs_orth = math.vec2.rotate(obs_orth, -pose.orientation.yaw)
              debug.rays.add(100,0,0, rotated_obs_orth.x*100, rotated_obs_orth.y*100, 0.0)
              POS_DES = math.vec2.add(obs_orth, pose.position)
            }

            # if(math.vec2.length(POS_DES) == 0)

            # target_array = nil
            allow_corner_pass = 1
            # x=2
            if(obstacle_vector.cnt > TOUCHING_OBS_THRESH and math.vec2.length(POS_DES) == 0 and check_for_nei_not_obs(obstacle_vector) == 0){
              next_task_update(obstacle_vector, allow_correner_Case)
              TASK = 0
              goto(0.0,0.0)
              log("[",id,"] Leaving s swarm and joining cagers")
              s.leave()
              # task = nil
              cagers.join()
            }
          }   
        }
      }
    }
  }

  if(not flag){

    debug.print("[",id,"] [first]Pos (",pose.position.x,",",pose.position.y,"), going to (",POS_DES.x,",",POS_DES.y,") WP ", (TASK_NUM-2)/2,"rotaters pushers",rotaters.in(),":",pushers.in())

    if(barrier2.get(TASK_NUM)){
      check_and_add_barrier(barrier2.getrid(TASK_NUM),barrier_array)
      if((size(barrier_array)-1)>= swarm_size*(0.7) or barrier_broadcast == 1){
        if(Wait_time_for_next_task == 0){
          Wait_time_for_next_task = time 
        }

        if(time - Wait_time_for_next_task < 25){
          #
        }
        else if(pushers.in()){
          Wait_time_for_next_task = 0
          set_wheels(0.0,0.0)
          TASK = 1
          pushers.leave()
          effective_pusher = 0
          rotaters.join()  
          log("[",id,"] Put centroid val")
          centroid.put(id,{.x=pose.position.x,.y=pose.position.y})
          barrier_array = {.1=100000}
          TASK_NUM = TASK_NUM + 1
          neighbors.broadcast("BB",1)
        }
        else if(rotaters.in()){
          Wait_time_for_next_task = 0
          set_wheels(0.0,0.0)
          centroid.put(id,NIL)
          FLAG =0
          rotaters.leave()
          pushers.join()
          TASK = 1
          barrier_array = {.1=10000000}
          TASK_NUM = TASK_NUM + 1
          neighbors.broadcast("BB",1)
          if(id == 0)
          {
            log((TASK_NUM-2)/2,":",Pushed_obj_pos.x,":",Pushed_obj_pos.y)
          }
          
          if(TASK_NUM >= barrier.size()*2)
          {
            EXPERIMENT_DONE = 1
            log("Over ....... ")
            pushers.leave()
          }
          else { 
            POS_DES = math.vec2.add({.x = barrier.get(TASK_NUM).x - Pushed_obj_pos.x,.y = barrier.get(TASK_NUM).y - Pushed_obj_pos.y},pose.position)
            Prev_push_obj_pos = {.x = barrier.get(TASK_NUM).x,.y = barrier.get(TASK_NUM).y}
            n = find_nei_in_set()
            yaw = barrier.get(TASK_NUM).yaw - barrier.get(TASK_NUM-2).yaw
          }
        }
      }
    }

    if(pushers.in()){
      if(TASK){
        barrier_broadcast = 0
        show_colored_trajectory()
        var vector_to_neighbour = {.x =0,.y=0}
        var move_in_wc = {.x=0,.y=0}
        var move_vec = {.x=0,.y=0}
        var vector_to_target = {.x=0,.y=0}
        var move_in = {.x=0,.y=0}
        move_vec = obtain_local_vec_to_target(POS_DES,pose.position,pose.orientation.yaw) 
        vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 5)
        #var move_in=obtain_local_vec_to_target(Pushed_obj_pos,pose.position,pose.orientation.yaw)
        
        if(obs_vec_1().len > 0){
          var num = 0
          var denom = 0
          var angle =0 
          move_in_wc = math.vec2.newp(obs_vec_1().len,obs_vec_1().ang)
          num = math.vec2.dot(move_vec,move_in_wc)
          denom =  math.vec2.length(move_vec) * math.vec2.length(move_in_wc) 
          angle = math.acos(num/denom)
          if((angle > 2) or (angle < -2))
          {
            effective_pusher = 0
            move_in = math.vec2.scale(math.vec2.norm(move_in_wc), 1)
            vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 3)
          }
          else{
            effective_pusher = 1
            vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 3)
            move_in = math.vec2.scale(math.vec2.norm(move_in_wc), 2)
          }
        }

        vector_to_neighbour = find_neighbours()
        if(math.vec2.dis(vector_to_neighbour,{.x=0,.y=0})>0){
          vector_to_neighbour = math.vec2.scale(math.vec2.norm(vector_to_neighbour), 2)
        }
        
        vector_to_target = math.vec2.add(move_in,vector_to_target)
        vector_to_target = math.vec2.add(vector_to_neighbour,vector_to_target)
        vector_to_target = math.vec2.scale(math.vec2.norm(vector_to_target), 20)
        



        goto(vector_to_target.x, vector_to_target.y)
        if(math.vec2.dis(POS_DES,pose.position)<0.08)
        {
          TASK = 0
          set_wheels(0.0,0.0)
          if(barrier2.get(TASK_NUM)){
            log("push:",TASK_NUM,":",id,":",size(barrier_array))
            barrier2.put(TASK_NUM,barrier2.get(TASK_NUM)+1)
          }
          else{
            barrier2.put(TASK_NUM,1)
          }
        }
      }
    }	
     
    if(rotaters.in()){
      #set_wheels(0.0,0.0)
      
      #log("[",id,"] size of swarms ", swarm_size," centroid ", centroid.size()," null ", count_null())
      if((centroid.size()>=swarm_size) and (not FLAG) and (count_null()>=swarm_size)){
        TASK =1
        FLAG = 1
        #log(pose.position.x,pose.position.y)
        init_vector = math.vec2.sub(pose.position,Pushed_obj_pos)
        init_distance = math.vec2.dis(pose.position,Pushed_obj_pos)
        centre = calc_centroid()
        centroid_table[size(centroid_table)]={.x=centre.x,.y=centre.y}
        if (id == 0){
          log(id,":","centre",centre.x,":",centre.y)
          log(id,":","real",Pushed_obj_pos.x,":",Pushed_obj_pos.y)
          log(id,":","difference",math.vec2.dis(centre,Pushed_obj_pos))
        }
      }
      else if(TASK and FLAG){
        barrier_broadcast = 0
        show_colored_trajectory()
        var move_away = {.x =0,.y=0}
        var move_per = {.x=0,.y=0}
        var move_in = {.x=0,.y=0}
        var vector_to_target = {.x=0,.y=0}
        var present_vec = {.x=0,.y=0}
        var present_dis = 0
        var num = 0
        var denom =0
        var angle =0
        move_per=obtain_perpendicular(Pushed_obj_pos,pose.position)
        move_in=obtain_local_vec_to_target(Pushed_obj_pos,pose.position,pose.orientation.yaw)

        var num_rot = 0
        var denom_rot = 0
        var angle_rot =0 
        move_in_wc = math.vec2.newp(obs_vec_1().len,obs_vec_1().ang)
        num_rot = math.vec2.dot(move_per,move_in_wc)
        denom_rot =  math.vec2.length(move_per) * math.vec2.length(move_in_wc) 
        angle_rot = math.acos(num_rot/denom_rot)
        # log("[",id,"]",angle_rot)
        if((angle_rot > 1.5) or (angle_rot < -1.5)){
          effective_rotater = 1
        }
        else{
          # log("[",id,"]","Effective rotater")
          effective_rotater = 0
        }
        move_per = math.vec2.scale(math.vec2.norm(move_per), 30)
        move_in = math.vec2.scale(math.vec2.norm(move_in), 25)
        move_away = find_neighbours()
        if (math.vec2.dis(move_away,{.x=0,.y=0})>0){
          move_away = math.vec2.scale(math.vec2.norm(move_away), +20)
        }
        vector_to_target = math.vec2.add(move_per,move_in) 
        vector_to_target = math.vec2.add(vector_to_target,move_away)
        vector_to_target = math.vec2.scale(math.vec2.norm(vector_to_target), 20)
        goto(vector_to_target.x,vector_to_target.y)
        present_vec = math.vec2.sub(pose.position,Pushed_obj_pos)
        present_dis = math.vec2.dis(pose.position,Pushed_obj_pos)
        num = math.vec2.dot(present_vec,init_vector)
        denom = present_dis * init_distance
        angle = math.acos(num/denom)
        if ((angle > (yaw - 0.05)) and (angle < (yaw + 0.05))){
          TASK = 0
          set_wheels(0.0,0.0)
          if (barrier2.get(TASK_NUM)){
            barrier2.put(TASK_NUM,barrier2.get(TASK_NUM)+1)
            log("push:",TASK_NUM,":",id,":",size(barrier_array))
          }
          else{
           barrier2.put(TASK_NUM,1)
          }
        }
      }
    }
  }  # End of not flag 
}


function obtain_perpendicular(coord1,coord2){
  m_target = {.x =0, .y = 0}
  m_pos = {.x = 0,.y=0}
  m_pos = math.vec2.new(coord2.x,coord2.y)
  m_object = math.vec2.new(coord1.x,coord1.y)
  m_target = math.vec2.sub(m_object,m_pos)
  m_target = math.vec2.rotate(m_target,1.57 - pose.orientation.yaw)
  return m_target
}



function find_neighbours(){

  Accum ={.x=0,.y=0, .error=0}
  neighbors.foreach(
    function(rid, data){
      var error = ((data.distance - (INTER_ROBOT_CAGING_DIS*100)+10)/data.distance)
      var angular_error = 0
      if(n[rid]) angular_error=(data.azimuth - n[rid].a)/3.14 
      
      Accum.error = Accum.error + math.abs(error)
      if((n[rid]) or (data.distance < (INTER_ROBOT_CAGING_DIS*100)+10))
      {
          var my_vec = math.vec2.newp(data.distance, data.azimuth)
          Accum.x= Accum.x + ( error * (my_vec.x - math.cos(angular_error)))
          Accum.y= Accum.y + ( error * (my_vec.y - math.sin(angular_error)))
      }
    }
  )
  return Accum

}

function find_nei_in_set(){
  var neighbours = {}
  neighbors.foreach(
  function(rid, data) 
  {
    if (data.distance< (INTER_ROBOT_CAGING_DIS*100)+10)
      {
        neighbours[rid] = {.a = data.azimuth}
      }
  })
  return neighbours
}


function check_and_add_barrier(a,t){
  var siz = size(t)
  var i = 1
  while(i<=(siz))
  {
    if(t[i] == a)
      {return}
    if(i == siz)
      {t[siz+1] = a
  }
    i = i+1
  }
}


function next_task_update(obs, nei_in_previous_point){   
  var i = task.size()
  if(i==1){
    target_point = {.x=0,.y=0}
    target_point.x = 4                     #-10*pose.position.x
    target_point.y = 4                     #-10*pose.position.y
    log("target x:",target_point.x," y:",target_point.y )
    #target.put("target",{.x = target_point.x, .y = target_point.y})
    if( (( obs.ang  > 0.85 and obs.ang < 2.55 ) or ( obs.ang  < -0.85 and obs.ang > -2.55 )) and math.vec2.length(POS_DES) == 0 ){
      log("[",id,"]  X increment " )
      next_branch_one = {.id=id,.pos={.x=pose.position.x+INTER_ROBOT_CAGING_DIS,.y=pose.position.y},.bid = 1000000,.branch = 1}
      next_branch_two = {.id=id,.pos={.x=pose.position.x-INTER_ROBOT_CAGING_DIS,.y=pose.position.y},.bid = 1000000,.branch =-1}
      var current_task = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y},.bid = NIL,.branch = 0}
      task.put(1,current_task)
      task.put(i+1,next_branch_one)
      task.put(i+2,next_branch_two)
    }
    else if(((obs.ang  < 0.85 and obs.ang > -0.85 ) or (obs.ang  < 3.67 and obs.ang > 2.55) or (obs.ang  > -3.67 and obs.ang < -2.55)) and math.vec2.length(POS_DES) == 0 ){
      log("[",id,"]  Y increment " )
      next_branch_one = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y+INTER_ROBOT_CAGING_DIS},.bid = 1000000,.branch = 1}
      next_branch_two = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y-INTER_ROBOT_CAGING_DIS},.bid = 1000000,.branch = -1}
      var current_task = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y},.bid = NIL,.branch = 0}
      task.put(1,current_task)
      task.put(i+1,next_branch_one)
      task.put(i+2,next_branch_two)
    }
  }
  else{
    var previous_task = {}

    if(BRANCH == 1){
      if(size(left_branch) <= 2 ){
        previous_task = task.get(1).pos
      }
      else{
        previous_task = left_branch[size(left_branch)-1]
      }
    }
    else{
      if(size(right_branch) <= 2){ 
        previous_task = task.get(1).pos
      }
      else{
        previous_task = right_branch[size(right_branch)-1]    
      }
    }
      previous_task = math.vec2.sub(previous_task,pose.position)
    var rotated_prev_task = {} 
    if(nei_in_previous_point == 1){
      log("[",id,"] NEI ROTATING 180 DEG")
      rotated_prev_task = math.vec2.rotate(previous_task,math.pi)
    }
    else{
      log("[",id,"] NEI ROTATING 270 DEG")
      rotated_prev_task = math.vec2.rotate(previous_task,-math.pi/2) 
    }

    rotated_prev_task = math.vec2.newp(INTER_ROBOT_CAGING_DIS, math.vec2.angle(rotated_prev_task) )
    rotated_prev_task = math.vec2.add(rotated_prev_task, pose.position)
      
    var next_one = {.id=id,.pos={.x=rotated_prev_task.x,.y=rotated_prev_task.y},.bid = 1000000,.branch = BRANCH}
    var current_task = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y},.bid = NIL,.branch = BRANCH}
    task.put(M_CAGING_TASK,current_task)
    if (task_checker(next_one.pos)){
      task.put(i+1,next_one)
      log("[",id,"] Adding task: ", i+1," Branch ", BRANCH, " Stig branch: ",task.get(i+1).branch)

    }  

  }
}




 function task_checker(next_target)
 {

  var previous_point_opp_branch = {}
  var small = 0
  if(BRANCH == 1){
    if(size(right_branch) <= 2 ){
      previous_point_opp_branch = task.get(1).pos
      small = 1
    }
    else{
      previous_point_opp_branch = get_last_point_from_table(right_branch_list)
    }
    #log ("[",id,"]", "size" , size(right_branch))

  }
  else {
    if(size(left_branch) <= 2 ){
      previous_point_opp_branch = task.get(1).pos
      small = 1
    }
    else{
      previous_point_opp_branch =  get_last_point_from_table(left_branch_list)
    }
    #log ("[",id,"]", "size" , size(right_branch))

  }
   #log ("[",id,"]", "target_checker_next_target" , next_target.x,":",next_target.y)
   #log ("[",id,"]", "target_checker_next_target" , previous_point_opp_branch.x,":",previous_point_opp_branch.y) 
   #log ("[",id,"]", "target_checker" , math.vec2.dis(next_target,previous_point_opp_branch))
 

   if (math.vec2.dis(next_target,previous_point_opp_branch)<(INTER_ROBOT_CAGING_DIS + 0.85*INTER_ROBOT_CAGING_DIS) and small==0){
   	barrier_cage.put(id,1)
   	log("barrier")
   	return 0
   	}
  	
   	return 1
	

 }


function obtain_local_vec_to_target(coord1,coord2,yaw)
{
    m_target = {.x =0, .y = 0}
    m_pos = {.x = 0,.y=0}
    m_target = math.vec2.new(coord1.x,coord1.y)
    m_pos = math.vec2.new(coord2.x,coord2.y)
    m_target = math.vec2.sub(m_target,m_pos)
    m_target = math.vec2.rotate(m_target,-yaw)
    return m_target
}

function obs_vec()
{
  var accum = {.cnt = 0, .x=0, .y=0 }
  accum.x = 0.0
  accum.y = 0.0
  var accum_max=0
  var i = 0
  while(i < size(proximity)) {
  if(proximity[i].value > accum_max){
	  accum_max = proximity[i].value
  }
  accum.x = accum.x + proximity[i].value * math.cos(proximity[i].angle)
  accum.y = accum.y + proximity[i].value * math.sin(proximity[i].angle)
  i = i + 1
  }
  accum.x = accum.x / size(proximity)
  accum.y = accum.y / size(proximity)
  var len = math.sqrt(accum.x * accum.x + accum.y * accum.y)
  var ang = math.atan(accum.y, accum.x)
  accum = math.vec2.rotate(accum,+pose.orientation.yaw)
  len = math.sqrt(accum.x * accum.x + accum.y * accum.y)
  ang = math.atan(accum.y, accum.x)
  return {.len=len,.ang=ang, .cnt = accum_max}
}


function obs_vec_1()
{
  var accum = {}
  accum.x = 0.0
  accum.y = 0.0
  var i = 0
  while(i < size(proximity)) {
  accum.x = accum.x + proximity[i].value * math.cos(proximity[i].angle)
  accum.y = accum.y + proximity[i].value * math.sin(proximity[i].angle)
  i = i + 1
  }
  accum.x = accum.x / size(proximity)
  accum.y = accum.y / size(proximity)
  var len = math.sqrt(accum.x * accum.x + accum.y * accum.y)
  var ang = math.atan(accum.y, accum.x)
  len = math.sqrt(accum.x * accum.x + accum.y * accum.y)
  ang = math.atan(accum.y, accum.x)
  return {.len=len,.ang=ang}
}


function gradient()
{
  task_size = task.size()
  if(task_size - last_size)
  {

    i = 1
    while((i-1)<(task_size - last_size)) 
    {
      bidding_timer[last_size+i] = 0
      i = i + 1
    }
  }
  cnt = 1
  while(cnt-1 < task_size){ 
      # if(cnt == 5){
      #   var task5 = task.get(5)
      #   if(id== 0 and task5 !=nil) log(" Task 5 Assigned to ", task5.id)
      # }

    if(task.get(cnt).bid){
      if( M_CAGING_TASK != -1 and task.get(cnt).id == id and task.get(cnt).bid != nil){
        log("[",id,"] FIRST ERROR!!!! I WAS ASSIGNED TWO TASKS FIRST TASK ",M_CAGING_TASK," SECOND TASK ", cnt)      
        task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.bid=10000,.branch=task.get(cnt).branch})
      }
      if(task.get(cnt).branch == 1){
        if(not (branch_list_check[cnt] != nil) ){
          left_branch_list[size(left_branch_list)] = cnt
          branch_list_check[cnt] = 1
        }
        # check_and_add(task.get(cnt).pos,left_branch)
      } 
      if(task.get(cnt).branch == -1){
        if(not (branch_list_check[cnt] != nil)){
          right_branch_list[size(right_branch_list)] = cnt
          branch_list_check[cnt] = 1
        }
        # check_and_add(task.get(cnt).pos,right_branch)
      }
      if(M_CAGING_TASK == -1){
  
        if(task.get(cnt).bid >= 10000){
          bidding_timer[cnt] = 0
        }
        
        if ((not bidding_timer[cnt]%k) and M_CAGING_TASK == -1){
          var current_pose = math.vec2.new(pose.position.x,pose.position.y)
          var current_bid = task.get(cnt).bid
          var my_bid = math.vec2.dis(task.get(cnt).pos,current_pose)
          if (current_bid > my_bid){
            task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.bid=my_bid,.branch=task.get(cnt).branch})
          }
        }
        
        bidding_timer[cnt] = bidding_timer[cnt] + 1
          
        if(bidding_timer[cnt] == bidding_time){
          if(task.get(cnt).id == id){
            if(M_CAGING_TASK == -1){
              TASK = 1
              POS_DES = task.get(cnt).pos
              BRANCH = task.get(cnt).branch
              M_CAGING_TASK = cnt
              log("[",id,"] Task assigned to me ",cnt, " BRANCH ", BRANCH) 
              if(BRANCH == 1){
                var index = 0 
                left_branch[1] = {.x=task.get(1).pos.x,.y=task.get(1).pos.y}
                target_array[1] = left_branch[1]
                while(index < size(left_branch_list)){
                  var key = left_branch_list[index]
                  log("[",id,"] left_branch K",key," -> (",task.get(key).pos.x,",",task.get(key).pos.y,")")
                  if(task.get(key) != nil){
                    left_branch[size(left_branch)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                    target_array[size(target_array)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                  }
                  index = index + 1
                }

                index = 0
                right_branch[1] = {.x=task.get(1).pos.x,.y=task.get(1).pos.y}
                #target_array[1] = right_branch[1]
                while(index < size(right_branch_list)){
                  var key = right_branch_list[index]
                  #log("[",id,"] right_branch K",key," -> (",task.get(key).pos.x,",",task.get(key).pos.y,")")
                  if(task.get(key) != nil){
                    right_branch[size(right_branch)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                    #target_array[size(target_array)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                  }
                  index = index + 1
                }


              }
              if(BRANCH == -1){
                var index = 0 
                left_branch[1] = {.x=task.get(1).pos.x,.y=task.get(1).pos.y}
                #target_array[1] = left_branch[1]
                while(index < size(left_branch_list)){
                  var key = left_branch_list[index]
                  #log("[",id,"] left_branch K",key," -> (",task.get(key).pos.x,",",task.get(key).pos.y,")")
                  if(task.get(key) != nil){
                    left_branch[size(left_branch)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                    #target_array[size(target_array)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                  }
                  index = index + 1
                }

                index = 0
                right_branch[1] = {.x=task.get(1).pos.x,.y=task.get(1).pos.y}
                target_array[1] = right_branch[1]
                while(index < size(right_branch_list)){
                  var key = right_branch_list[index]
                  log("[",id,"] right_branch K",key," -> (",task.get(key).pos.x,",",task.get(key).pos.y,")")
                  if(task.get(key) != nil){
                    right_branch[size(right_branch)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                    target_array[size(target_array)+1] = {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
                  }
                  index = index + 1
                }
               }
              print_array(target_array)

              if(target_array[2]){
                POS_DES = {.x = target_array[2].x,.y = target_array[2].y}
              }
              task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.bid=NIL,.branch=task.get(cnt).branch})
            }
            else{
              log("[",id,"] ERROR!!!! I WAS ASSIGNED TWO TASKS FIRST TASK ",M_CAGING_TASK," SECOND TASK ", cnt)
              task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.bid=100000,.branch=task.get(cnt).branch})
            }
          }
        }
      }
    }
    cnt = cnt + 1
  }  
  last_size = task_size

}

function check_and_add(a,t) {

  var siz = size(t)
  var i = 1
  while(i<=(siz))
  {
  if(((t[i].x == a.x) and (t[i].y == a.y)) or ((a.x == 0.0) and (a.y==0)))
      {return}
    
    if(i == siz)
      {
      t[siz+1] = a
      }
    i = i+1
  }
  
}


function check_and_copy(a,t) {
var siz = size(t)
var i=1
while(i<=(siz))
{
target_array[i] = t[i]
if((t[i].x == POS_DES.x) and (t[i].y == POS_DES.y))
{return} 
i = i+1
}

}


function print_array(t){
  if(t)
  {
  siz = size(t)
  var i = 1
  while(i<=siz)
    {
      log("TAR array id",id,":","i",i,":",t[i].x,":",t[i].y)
      i = i+1
    }
  }
}

function calc_centroid()
{
centre = {.x=0,.y=0}
siz = total_bots
var i = 0
while(i<siz)
  { 
    if(centroid.get(i))
    {
    centre.x = centroid.get(i).x/swarm_size + centre.x
    centre.y = centroid.get(i).y/swarm_size + centre.y
    }
    i = i + 1
  }
  
  return centre
}

function count_null()
{
siz = total_bots
var i = 0
var count = 0
while(i<siz)
{
  if(centroid.get(i))
  {
   count = count + 1
  }
  i=i+1
}
  if (id == 0)
  {
   #log(id,"not null ",count)
  }
  return count 
}


function avoid_nei_using_potential(m_target){
  var Accum = {.cnt=0,.x=0.0,.y=0.0}
  neighbors.foreach(
    function(rid, data){
      var potential = harmonMagnitude(data.distance, SAFETY_DISTANCE+10, HARMON_A0, HARMON_K)
      if(data.distance < SAFETY_DISTANCE+50 and potential < 0){
        var my_vec = math.vec2.newp(data.distance, data.azimuth)
        debug.rays.add(0,100,0, my_vec.x/100, my_vec.y/100, 0.0)
        var pot_vec = math.vec2.newp(potential, data.azimuth)
        Accum.x = Accum.x + pot_vec.x
        Accum.y = Accum.y + pot_vec.y
        Accum.cnt= Accum.cnt +1
      }
    }
  )
  if(Accum.cnt > 0){
    Accum.x = Accum.x/Accum.cnt
    Accum.y = Accum.y/Accum.cnt
  }
  var normalized_target_vec = math.vec2.new(m_target.x,m_target.y)
  normalized_target_vec = math.vec2.scale(normalized_target_vec, 1/math.vec2.length(normalized_target_vec))
  
  # if(math.vec2.length(Accum) > 0) Accum = math.vec2.scale(Accum, 1/math.vec2.length(Accum))
  var target_weight = 3.5
  var return_vec = math.vec2.new((target_weight*normalized_target_vec.x)+ (Accum.x),(target_weight*normalized_target_vec.y)+(Accum.y))
  # return_vec = math.vec2.scale(return_vec,10)
  return return_vec
}

function harmonMagnitude(dist, desiredDist, a0, k) {
  return a0 + ((dist - desiredDist)/math.abs(dist - desiredDist)) * 1.0/2.0 * k * (dist - desiredDist)^2
}

function Check_for_robots_in_previous_dir(){
  var previous_point = {}

  if(BRANCH == 1){
    if(size(left_branch) <= 2 ){
      previous_point = task.get(1).pos
    }
    else{
      previous_point = left_branch[size(left_branch)-1]
    }
  }
  else{
    if(size(right_branch) <= 2){ 
      previous_point = task.get(1).pos
    }
    else{
      previous_point = right_branch[size(right_branch)-1]    
    }
  }

  
  log("[",id,"] last point ", previous_point.x,",",previous_point.y)
  previous_point =math.vec2.sub(previous_point,pose.position)
  previous_point = math.vec2.rotate(previous_point, -pose.orientation.yaw)
  var previous_point_ang = math.vec2.angle(previous_point)
  var comparision_result = {.res=0}
  neighbors.foreach(function(rid, data){
    # var my_vec = math.vec2.newp(data.distance, data.azimuth)
    var ang_diff = math.abs(previous_point_ang - data.azimuth)
    if(ang_diff < 0.3 and data.distance < INTER_ROBOT_CAGING_DIS*200){
      log("[",id,"] ang diff with ",rid, " is ", ang_diff)

      comparision_result.res = 1
    }
  })
  return comparision_result.res  
}

function LimitAngle(angle){
  if(angle>2*math.pi)
    return angle-2*math.pi
  else if (angle<0)
    return angle+2*math.pi
  else
    return angle
}

function check_for_nei_not_obs(c_obs){
  var ret={.val=0}
  neighbors.foreach(function(rid,data){
    var global_nei_pos = math.vec2.newp(data.distance,data.azimuth)
    global_nei_pos = math.vec2.rotate(global_nei_pos, pose.orientation.yaw)
    var global_nei_limited_ang = LimitAngle(math.vec2.angle(global_nei_pos))
    var c_obs_limited_ang = LimitAngle(c_obs.ang)

    var nei_ang_diff = math.abs(global_nei_limited_ang - c_obs_limited_ang) 
     
    # log("[",id,"] nei",":", data.distance,":", nei_ang_diff )
    if(data.distance < (RANGE_OF_PROXMITY*100) and nei_ang_diff < 0.5){
      ret.val=1
    }
  })
  log("[",id,"] Nei Is OBSTACLE ", ret.val)
  return ret.val
}

function get_last_point_from_table(table){
  var key = table[size(table)-1]
  return {.x=task.get(key).pos.x,.y=task.get(key).pos.y}
}
