include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/debug.bzz"


Pushed_obj_pos = {}
target = {.x=2.0,.y=3.0,.yaw = 1.57}

function init() {
SWARM_SIZE = 12 
TASK = 1
pushers=swarm.create(4)
pushers.join()
rotaters= swarm.create(5)
barrier = stigmergy.create(3)
barrier.put(1,1)
TIME_STEP = 1
POS_DES = {.x=0,.y=0}
barrier.onconflict(function (k,local,remote) { 
    if(remote.data <=local.data)
      {return local}
    else {return remote}})


}

function step(){

  
    if (barrier.get(1)==12)
    {
      barrier.put(1,nil)
      log("rotate")
      rotaters.join()
      TASK = 1
      init_vector = math.vec2.sub(pose.position,Pushed_obj_pos)
      init_distance = math.vec2.dis(pose.position,Pushed_obj_pos)
      yaw = target.yaw
      #POS_DES = math.vec2.add(target,pose.position)
    }


    if (TIME_STEP == 1)
    {
    POS_DES = math.vec2.add({.x=target.x,.y=target.y},pose.position)
    }
    else {
    if(pushers.in()){
    if(TASK)
    {
    show_colored_trajectory()
    #log(id,": distance_to_target",math.vec2.dis(target,Pushed_obj_pos))
    var move_vec = obtain_local_vec_to_target(POS_DES,pose.position,pose.orientation.yaw) 
    #log("id",move_vec.x,move_vec.y)
    vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 40)
    move_in=obtain_local_vec_to_target(Pushed_obj_pos,pose.position,pose.orientation.yaw)
    move_in = math.vec2.scale(math.vec2.norm(move_in), 20)
    vector_to_neighbour = find_neighbours()
    if (math.vec2.dis(vector_to_neighbour,{.x=0,.y=0})>0){
    vector_to_neighbour = math.vec2.scale(math.vec2.norm(vector_to_neighbour), +40)}
    vector_to_target = math.vec2.add(vector_to_neighbour,vector_to_target)
    vector_to_target = math.vec2.add(vector_to_target,move_in)
    vector_to_target = math.vec2.scale(math.vec2.norm(vector_to_target), 10)
    goto(vector_to_neighbour.x, vector_to_neighbour.y)
    if(math.vec2.dis(POS_DES,pose.position)<0.01)
    {
      TASK = 0
      pushers.leave()
      set_wheels(0.0,0.0)
      #log(barrier.get(1))
      if (barrier.get(1))
        {
      cnt = barrier.get(1)
      
      barrier.put(1,cnt + 1)
        }

    }

    }}	
     

     
    if(rotaters.in())
    {
      
      if (TASK)
      {
      #log(id,"pose",pose.position.x,":",pose.position.y,":",pose.orientation.yaw)
      show_colored_trajectory()
      move_per=obtain_perpendicular(Pushed_obj_pos,pose.position)
      move_in=obtain_local_vec_to_target(Pushed_obj_pos,pose.position,pose.orientation.yaw)
      move_per = math.vec2.scale(math.vec2.norm(move_per), 30)
      move_in = math.vec2.scale(math.vec2.norm(move_in), 10)
      move_away = find_neighbours()
      if (math.vec2.dis(move_away,{.x=0,.y=0})>0){
      #log(id)
      move_away = math.vec2.scale(math.vec2.norm(move_away), +15)}
      vector_to_target = math.vec2.add(move_per,move_in) 
      #log(id, "vec",vector_to_target.x,":",vector_to_target.x)
      vector_to_target = math.vec2.add(vector_to_target,move_away)
      vector_to_target = math.vec2.scale(math.vec2.norm(vector_to_target), 5)
      #log(id, "vec_tot",vector_to_target.x,":",vector_to_target.y)
      goto(vector_to_target.x,vector_to_target.y)
      present_vec = math.vec2.sub(pose.position,Pushed_obj_pos)
      present_dis = math.vec2.dis(pose.position,Pushed_obj_pos)
      num = math.vec2.dot(present_vec,init_vector)
      denom = present_dis * init_distance
      angle = math.acos(num/denom)
      #log(id,":",angle)
      if ((angle > (yaw - 0.02)) and (angle < (yaw + 0.02)))
      {
       TASK = 0
       set_wheels(0.0,0.0)
       rotaters.leave()
       log(id," : rotated")
      }
      }
    }
    
  
    }
    TIME_STEP = TIME_STEP + 1
}

function obtain_local_vec_to_target(coord1,coord2,yaw)
{
    m_target = math.vec2.new(coord1.x,coord1.y)
    m_pos = math.vec2.new(coord2.x,coord2.y)
    m_target = math.vec2.sub(m_target,m_pos)
    m_target = math.vec2.rotate(m_target,-yaw)
    return m_target
}


function find_neighbours()
{
  c = math.vec2.new(0.0,0.0)
  neighbors.foreach(
  function(rid, data) {
        
          if ((data.distance<30) .08 and data.azimuth <0.08)){
            c.x = c.x + (data.distance - 25) * math.cos(data.azimuth)/data.distance  
            c.y = c.y + (data.distance - 25) * math.sin(data.azimuth)/data.distance
            }
        })

  #log(id,":",c.x,":",c.y)
  
  return c

}

function obtain_perpendicular(coord1,coord2)
{
    m_pos = math.vec2.new(coord2.x,coord2.y)
    m_object = math.vec2.new(coord1.x,coord1.y)
    m_target = math.vec2.sub(m_object,m_pos)
    m_target = math.vec2.rotate(m_target,1.57 - pose.orientation.yaw)

    return m_target

}