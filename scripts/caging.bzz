include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/debug.bzz"


TIME_STEP = 1
SWARM_SIZE = 1
Pushed_obj_pos = {}
last_size = 0
left_branch = {.1={.x=0,.y=0}}
right_branch = {.1={.x=0,.y=0}}
target = {.x = 4,.y=4}
target_array = {.1={.x=0,.y=0}}
function init() { 
x= 2
TASK = 0
DIR = 1
POS_DES={.x=0,.y=0}
DIR_AXIS = 1
s = swarm.create(1)
s.join()
cagers=swarm.create(2)
barrier= stigmergy.create(5)
task = stigmergy.create(3)
k = 10
bidding_time = 50
bidding_timer={}
task.onconflict(function (k,local,remote) {	
		if(remote.bid <=local.bid)
	    {return remote}
		else {return local}})
}
  

function step()
{
    if (TIME_STEP==1)
    {
    task.put(1,{.id=id,.pos={.x=0,.y=0},.dir = -1,.dir_axis=-1,.bid=100000,.branch = 0})
    }
    
    else if(TIME_STEP>1)
    {
    s.exec(gradient)
    if(cagers.in()) {  
    if (barrier.size()==2)
    {
      log("caging_done")
      cagers.leave()
    }
    
    }
    if(s.in()){
    if(TASK)
    {
    show_colored_trajectory()
    var move_vec = obtain_local_vec_to_target(POS_DES,pose.position,pose.orientation.yaw)
    vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 30)
    cmd_vel = LCA(vector_to_target)
    goto(cmd_vel.x, cmd_vel.y)
    

    if(target_array[x])
    {
     if((math.vec2.dis(POS_DES,pose.position)<0.3))
     {
        x=x+1
        if(target_array[x])
        {
        POS_DES = target_array[x]
        }

     }
    }
    if(not target_array[x])  
        {
        if (((math.vec2.dis(POS_DES,pose.position)<0.02) or (obs_vec().len > 0.2)))
          {
          check_for_barrier(pose.position)
          log(id,":",POS_DES.x,":",POS_DES.y)
          x=2
          TASK = 0
          target_array = {}
          prox_vec = obs_vec()
          next_task_update(prox_vec)
          POS_DES={.x=0,.y=0}
          set_wheels(0.0,0.0)
          if (prox_vec.len > 0.05)
          {
          s.leave()
         cagers.join()
          }
         }   


    }
    }
    }

    }
    TIME_STEP = TIME_STEP + 1

}

function next_task_update(obs)
{   
  var i = task.size()
  if (i==1)
  {
  if(( obs.ang  > 0.9 and obs.ang < 2.5 ) or ( obs.ang  < -0.9 and obs.ang > -2.5 ))
  {
  DIR_AXIS = 1
  next_branch_one = {.id=id,.pos={.x=pose.position.x+0.25,.y=pose.position.y},.dir=1,.dir_axis=DIR_AXIS,.bid = 1000000,.branch = 1}
  next_branch_two = {.id=id,.pos={.x=pose.position.x-0.25,.y=pose.position.y},.dir=-1,.dir_axis=DIR_AXIS,.bid = 1000000,.branch =-1}
  task.put(i+1,next_branch_one)
  task.put(i+2,next_branch_two)
  }
  else if((obs.ang  < 0.78 and obs.ang > -0.78 ) or (obs.ang  < 3.67 and obs.ang > 2.6) or (obs.ang  > -3.67 and obs.ang < -2.6))
  {
  DIR_AXIS = -1
  next_branch_one = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y+0.25},.dir=1,.dir_axis=DIR_AXIS,.bid = 1000000,.branch = 1}
  next_branch_two = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y-0.25},.dir=-1,.dir_axis=DIR_AXIS,.bid = 1000000,.branch = -1}
  task.put(i+1,next_branch_one)
  task.put(i+2,next_branch_two)
  }
  }
  else 
  {
  if(( obs.ang  > 0.9 and obs.ang < 2.5 ) or ( obs.ang  < -0.9 and obs.ang > -2.5 ) and (obs.len > 0.05))
  {
  DIR_AXIS = 1
  next_one = {.id=id,.pos={.x=pose.position.x+(DIR*0.25),.y=pose.position.y},.dir=DIR,.dir_axis=DIR_AXIS,.bid = 1000000,.branch = BRANCH}
  if(not check_for_barrier(next_one.pos))
  {
  task.put(i+1,next_one)
  }
  }
  else if  ((obs.ang  < 0.78 and obs.ang > -0.78 ) or (obs.ang  < 3.67 and obs.ang > 2.6) or (obs.ang  > -3.67 and obs.ang < -2.6) and (obs.len > 0.05))
  { 
  DIR_AXIS = -1
  next_one = {.id=id,.pos={.x=pose.position.x,.y=pose.position.y+(DIR*0.25)},.dir=DIR,.dir_axis=DIR_AXIS,.bid = 1000000,.branch = BRANCH}
  if (not check_for_barrier(next_one.pos))
  {
  task.put(i+1,next_one)
  }
  }
  else if (obs.len < 0.05)
  {
  if (DIR_AXIS==1)
  {
    if(math.vec2.dis({.x=pose.position.x,.y=pose.position.y+0.1},{.x=0,.y=0})>math.vec2.dis({.x=pose.position.x,.y=pose.position.y-0.1},{.x=0,.y=0}))
    {
      DIR = -1
    }
    else 
    {
      DIR = +1
    }
  }
  else  if (DIR_AXIS==-1)
  {
    if(math.vec2.dis({.x=pose.position.x+0.1,.y=pose.position.y},{.x=0,.y=0})>math.vec2.dis({.x=pose.position.x-0.1,.y=pose.position.y},{.x=0,.y=0}))
    {
      DIR = -1
    }
    else 
    {
      DIR = 1
    }
  }
  next_one = {.id=id,.pos={.x=0.0,.y=0.0},.dir=DIR,.dir_axis=DIR_AXIS,.bid = 1000000,.branch = branch}
  if (not check_for_barrier(next_one.pos))
  {
  task.put(i+1,next_one)
  }
  }
  }
  }

function check_for_barrier(coord1)
{
  vec_next_one = math.vec2.new(coord1.x,coord1.y)
  vec_obs = math.vec2.new(0.0,0.0)
  denom = math.vec2.dis(vec_obs,target)*math.vec2.dis(vec_next_one,target)
  obs_target = math.vec2.dis(vec_obs,target)
  next_one_target = math.vec2.dis(vec_next_one,target)
  vec_next_one=math.vec2.sub(vec_next_one,target)
  vec_obs = math.vec2.sub(vec_obs,target)
  num =  math.vec2.dot(vec_obs,vec_next_one)
  angle = math.acos((num/denom))
  if (((angle<0.02) and (angle>-0.02)) and (obs_target>next_one_target))
  {
    barrier.put(id,1)
    return 1
  }
  else 
  {
    return 0
  }
}


function obtain_local_vec_to_target(coord1,coord2,yaw)
{
    m_target = math.vec2.new(coord1.x,coord1.y)
    m_pos = math.vec2.new(coord2.x,coord2.y)
    m_target = math.vec2.sub(m_target,m_pos)
    m_target = math.vec2.rotate(m_target,-yaw)
    return m_target
}

function obs_vec()
{
  var accum = {}
  accum.x = 0.0
  accum.y = 0.0
  var i = 0
  while(i < size(proximity)) {
	accum.x = accum.x + proximity[i].value * math.cos(proximity[i].angle)
	accum.y = accum.y + proximity[i].value * math.sin(proximity[i].angle)
	i = i + 1
  }
  accum.x = accum.x / size(proximity)
  accum.y = accum.y / size(proximity)
  var len = math.sqrt(accum.x * accum.x + accum.y * accum.y)
  var ang = math.atan(accum.y, accum.x)
  accum = math.vec2.rotate(accum,+pose.orientation.yaw)
  len = math.sqrt(accum.x * accum.x + accum.y * accum.y)
  ang = math.atan(accum.y, accum.x)
  return {.len=len,.ang=ang}
}

function gradient()
{
    task_size = task.size()
    if(task_size - last_size)
    {

      i = 1
      while((i-1)<(task_size - last_size)) 
      {
        bidding_timer[last_size+i] = 0
        i = i + 1
      }
    }
    cnt = 1
    while(cnt-1 < task_size)
    { 
      if(task.get(cnt).bid)
      {
      if(task.get(cnt).branch == 1)
      {
      check_and_add(task.get(cnt).pos,left_branch)
      } 
      if(task.get(cnt).branch == -1)
      {
      check_and_add(task.get(cnt).pos,right_branch)
      } 
      if ((not bidding_timer[cnt]%k) and (not TASK))
      {
      current_pose = math.vec2.new(pose.position.x,pose.position.y)
      current_bid = task.get(cnt).bid
      dir = task.get(cnt).dir
      my_bid = math.vec2.dis(task.get(cnt).pos,current_pose)
      dir_axis = task.get(cnt).dir_axis
      branch = task.get(cnt).branch
      if (current_bid>my_bid)
         {
           task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=dir_axis,.bid=my_bid,.branch=branch})
         }
         bidding_timer[cnt] = bidding_timer[cnt] + 1
      }
      else 
         {
           bidding_timer[cnt] = bidding_timer[cnt] + 1
         }
      
      if (bidding_timer[cnt] == bidding_time)
      {
        if (task.get(cnt).id == id)
        {
          if(not TASK)
          {
          TASK = 1
          POS_DES = task.get(cnt).pos
          DIR = task.get(cnt).dir
          DIR_AXIS = task.get(cnt).dir_axis
          BRANCH = task.get(cnt).branch
          if(BRANCH == 1)
          {
          check_and_copy(POS_DES,left_branch)
          }
          if(BRANCH == -1)
          {
          check_and_copy(POS_DES,right_branch)
          }
          print_array(target_array)
          if(target_array[2])
          {
          POS_DES = {.x=target_array[2].x,.y=target_array[2].y}
          }
          task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=task.get(cnt).dir_axis,.bid=NIL,.branch=task.get(cnt).branch})
          }
          else
          {
          task.put(cnt,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=task.get(cnt).dir_axis,.bid=NIL,.branch=task.get(cnt).branch})
          task.put(task.size()+1,{.id=id,.pos=task.get(cnt).pos,.dir = task.get(cnt).dir,.dir_axis=task.get(cnt).dir_axis,.bid=100000,.branch=task.get(cnt).branch})
          }
        }
      }
      }
      cnt = cnt + 1
    }  
    last_size = task_size


}

function check_and_add(a,t) {

  siz = size(t)
  var i = 1
  while(i<=(siz))
  {
  if(((t[i].x == a.x) and (t[i].y == a.y)) or ((a.x == 0.0) and (a.y==0)))
      {return}
    
    if(i == siz)
      {
      t[siz+1] = a
      }
    i = i+1
  }
  
}


function check_and_copy(a,t) {
siz = size(t)
var i=1
while(i<=(siz))
{
target_array[i] = t[i]
if((t[i].x == POS_DES.x) and (t[i].y == POS_DES.y))
{return} 
i = i+1
}

}


function print_array(t){
  if(t)
  {
  siz = size(t)
  var i = 1
  while(i<=siz)
    {
      log("id",id,":","i",i,":",t[i].x,":",t[i].y)
      i = i+1
    }
  }
}
