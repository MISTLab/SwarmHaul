include "includes/vec2.bzz"
include "includes/RVO.bzz"
include "includes/debug.bzz"


Pushed_obj_pos = {.x=0,.y=0}
GOAL_STATE = math.vec2.new(-5, 0.0)
START_STATE = math.vec2.new(0.0 , 0.0)

function init() {
barrier_array = {.1=17}
SWARM_SIZE = 16 
TASK_NUM = 0
TASK = 1
pushers=swarm.create(4)
pushers.join()
rotaters= swarm.create(5)
barrier = stigmergy.create(3)
barrier2 = stigmergy.create(10)
barrier3 = stigmergy.create(11)
barrier.put(0,{.cnt=0,.x=0.0,.y=0.0,.yaw = 0})
TIME_STEP = 1
POS_DES = {.x=0,.y=0}
barrier.onconflict(function (k,local,remote) { 

        if(remote.robot<=local.robot)
        {
          return remote
        }
        else 
        {
          return local
        }

      
      }
    )


barrier2.onconflict(function (k,local,remote) { 

        if(local.data.val<remote.data.val)
          {
          #log(local.robot,":",remote.robot,"error-",local.data.val,":",remote.data.val)
          #remote.data.val = remote.data.val + 1
          check_and_add(local.robot,barrier_array)
          check_and_add(remote.robot,barrier_array)
          #print_array(barrier_array)
          return remote
          }
        
        else if(local.data.val>remote.data.val)
          {
          #log(local.robot,":",remote.robot,"error+",local.data.val,":",remote.data.val)
          #local.data.val = local.data.val + 1
          check_and_add(local.robot,barrier_array)
          check_and_add(remote.robot,barrier_array)
          #print_array(barrier_array)
          return local
          }

        if(local.data.val==remote.data.val)
          {
          #log(local.robot,":",remote.robot,"error=",local.data.val,":",remote.data.val)
          #remote.data.val = remote.data.val + 1
          check_and_add(local.robot,barrier_array)
          check_and_add(remote.robot,barrier_array)
          #print_array(barrier_array)
          return remote
          }                                          

                                          }
    )


}



function step(){

    if ((TIME_STEP == 1))
    {
    if (id == 0)
    {
    LoadGTMap()
    path_controls = OneShotPathPlanner(START_STATE.x,START_STATE.y,-3.14,GOAL_STATE.x,GOAL_STATE.y,-3.14,4,2.5)
    table_print_path(path_controls)
    }
    }
    
    else if ((TIME_STEP > 1) and (TIME_STEP < 6))
    {
    TASK_NUM = 2
    Prev_push_obj_pos={.x = barrier.get(TASK_NUM).x, .y = barrier.get(TASK_NUM).y}
    POS_DES = math.vec2.add({.x = barrier.get(TASK_NUM).x - barrier.get(TASK_NUM - 2).x,.y = barrier.get(TASK_NUM).y - barrier.get(TASK_NUM - 2).y},pose.position)
    n = find_nei_in_set()
    yaw = barrier.get(TASK_NUM).yaw - barrier.get(TASK_NUM - 2).yaw
    }

    else if ((TIME_STEP > 5) and (barrier2.get(TASK_NUM)))
    {

      check_and_add(barrier2.getrid(TASK_NUM),barrier_array)
      if((size(barrier_array)-1)>= 8)
      {
      if(pushers.in())
      {
      if(id == 9)
      {
      log(id,"push ")
      }
      pushers.leave()
      rotaters.join()
      TASK = 1
      init_vector = math.vec2.sub(pose.position,Pushed_obj_pos)
      init_distance = math.vec2.dis(pose.position,Pushed_obj_pos)
      barrier_array = {.1=17}
      TASK_NUM = TASK_NUM + 1
      }

      else if(rotaters.in())
      {
      if(id == 9)
      {
      log(id,"rotate ")
      }
      rotaters.leave()
      pushers.join()
      TASK = 1
      barrier_array = {.1=17}
      TASK_NUM = TASK_NUM + 1
      if(id == 0)
      {
      log((TASK_NUM-2)/2,":",Pushed_obj_pos.x,":",Pushed_obj_pos.y)
      }
      POS_DES = math.vec2.add({.x = barrier.get(TASK_NUM).x - Pushed_obj_pos.x,.y = barrier.get(TASK_NUM).y - Pushed_obj_pos.y},pose.position)
      Prev_push_obj_pos = {.x = barrier.get(TASK_NUM).x,.y = barrier.get(TASK_NUM).y,.yaw = barrier.get(TASK_NUM).yaw}
      n = find_nei_in_set()
      yaw = barrier.get(TASK_NUM).yaw - Prev_push_obj_pos.yaw
      }
      }
    }

    if (TIME_STEP > 5) {
    if(pushers.in()){
    if(TASK)
    {
    show_colored_trajectory()
    vector_to_neighbour = {.x =0,.y=0}
    move_vec = obtain_local_vec_to_target(POS_DES,pose.position,pose.orientation.yaw) 
    var move_in=obtain_local_vec_to_target(Pushed_obj_pos,pose.position,pose.orientation.yaw)
    num = math.vec2.dot(move_vec,move_in)
    denom =  math.vec2.length(move_vec) * math.vec2.length(move_in) 
    angle = math.acos(num/denom)
    if((angle > 2) or (angle < -2))
    {
    #log(id,"not needed for pushing")
    move_in = math.vec2.scale(math.vec2.norm(move_in), 0)
    vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 10.0)
    }

    else{
       vector_to_target = math.vec2.scale(math.vec2.norm(move_vec), 4.5)
       move_in = math.vec2.scale(math.vec2.norm(move_in), 4)
    }
    vector_to_neighbour = find_neighbours()
    if (math.vec2.dis(vector_to_neighbour,{.x=0,.y=0})>0){
    vector_to_neighbour = math.vec2.scale(math.vec2.norm(vector_to_neighbour), +4)}
    vector_to_target = math.vec2.add(vector_to_neighbour,vector_to_target)
    vector_to_target = math.vec2.add(vector_to_target,move_in)
    vector_to_target = math.vec2.scale(math.vec2.norm(vector_to_target), 20)
    goto(vector_to_target.x, vector_to_target.y)

    if(math.vec2.dis(POS_DES,pose.position)<0.02)
    {
      TASK = 0
      set_wheels(0.0,0.0)
      if(barrier2.get(TASK_NUM))
      {
      #log("push:",TASK_NUM,":",id,":",barrier2.get(TASK_NUM).val)
      barrier2.put(TASK_NUM,{.cnt = barrier2.get(TASK_NUM).cnt , .val = barrier2.get(TASK_NUM).val +1})
      
      }
      else 
      {
      #log("push:",TASK_NUM,":",id,":",1)
      
      barrier2.put(TASK_NUM,{.cnt = 1 , .val = 1})
      }
    }

    }}	
     

     
    if(rotaters.in())
    {
      
      if (TASK)
      {
      show_colored_trajectory()
      move_away = {.x =0,.y=0}
      move_per=obtain_perpendicular(Pushed_obj_pos,pose.position)
      move_in=obtain_local_vec_to_target(Pushed_obj_pos,pose.position,pose.orientation.yaw)
      if (yaw>0)
      {
      move_per = math.vec2.scale(math.vec2.norm(move_per), -30)
      }
      if ((yaw<0) or (yaw == 0))
      {
      move_per = math.vec2.scale(math.vec2.norm(move_per), +30)
      }
      move_per = math.vec2.scale(math.vec2.norm(move_per), 30)
      move_in = math.vec2.scale(math.vec2.norm(move_in), 25)
      move_away = find_neighbours()
      if (math.vec2.dis(move_away,{.x=0,.y=0})>0){
      move_away = math.vec2.scale(math.vec2.norm(move_away), +20)}
      vector_to_target = math.vec2.add(move_per,move_in) 
      vector_to_target = math.vec2.add(vector_to_target,move_away)
      vector_to_target = math.vec2.scale(math.vec2.norm(vector_to_target), 9)
      goto(vector_to_target.x,vector_to_target.y)
      present_vec = math.vec2.sub(pose.position,Pushed_obj_pos)
      present_dis = math.vec2.dis(pose.position,Pushed_obj_pos)
      num = math.vec2.dot(present_vec,init_vector)
      denom = present_dis * init_distance
      angle = math.acos(num/denom)
       if ((id == 5) and (not TIME_STEP%10))
       {
        log(id," : ", angle , "yaw" , yaw)
        }
      if ((angle > (abs(yaw) - 0.02)) and (angle < (abs(yaw) + 0.02)))
      {
       TASK = 0
       set_wheels(0.0,0.0)
       if (barrier2.get(TASK_NUM))
       {
       #log("rot:",TASK_NUM,":",id,":",barrier2.get(TASK_NUM).val)
       barrier2.put(TASK_NUM,{.cnt = barrier2.get(TASK_NUM).cnt,.val = barrier2.get(TASK_NUM).val+1})
       
       }
       else 
       {
       
       #log("rot:",TASK_NUM,":",id,":",1)
       barrier2.put(TASK_NUM,{.cnt = 1 , .val = 1})
       }
      }
      

      
    }
    
  
    }
    }
    TIME_STEP = TIME_STEP + 1
}

function obtain_local_vec_to_target(coord1,coord2,yaw)
{
    m_target = math.vec2.new(coord1.x,coord1.y)
    m_pos = math.vec2.new(coord2.x,coord2.y)
    m_target = math.vec2.sub(m_target,m_pos)
    m_target = math.vec2.rotate(m_target,-yaw)
    return m_target
}


function obtain_perpendicular(coord1,coord2)
{
    m_pos = math.vec2.new(coord2.x,coord2.y)
    m_object = math.vec2.new(coord1.x,coord1.y)
    m_target = math.vec2.sub(m_object,m_pos)
    m_target = math.vec2.rotate(m_target,1.57 - pose.orientation.yaw)
    return m_target
}



function find_neighbours()
{
             Accum ={.x=0,.y=0, .error=0 }
             neighbors.foreach(
                function(rid, data) {
                    var error = ((data.distance - 27)/data.distance)
                    var angular_error = 0
                    if(n[rid]) angular_error=(data.azimuth - n[rid].a)/3.14 
                    
                    Accum.error = Accum.error + math.abs(error)
                    if((n[rid]) or (data.distance < 27))
                    {
                        var my_vec = math.vec2.newp(data.distance, data.azimuth)
                        Accum.x= Accum.x + ( error * (my_vec.x - math.cos(angular_error)))
                        Accum.y= Accum.y + ( error * (my_vec.y - math.sin(angular_error)))
                    }
                }
            )
            return Accum

}

function find_nei_in_set()
{
  var neighbours = {}
  neighbors.foreach(
  function(rid, data) 
  {
    if (data.distance<30)
      {
        neighbours[rid] = {.a = data.azimuth}
      }
  })
  return neighbours
}

function table_print_path(t) {
  var t2 = {}
  foreach(t, function(key, value) {
      var ltab = {.x=value.x,.y=value.y,.yaw=value.yaw}
      barrier.put(2*key,{.cnt = 0,.x=ltab.x,.y=ltab.y,.yaw = ltab.yaw})
      log(id,":",key," : ",ltab.x," : ",ltab.y," : ",ltab.yaw)
      })
  barrier.put(0,{.cnt=0,.x=0.0,.y=0.0,.yaw = 0})
}


function check_and_add(a,t) {
  siz = size(t)
  var i = 1
  while(i<=(siz))
  {
    if(t[i] == a)
      {return}
    if(i == siz)
      {t[siz+1] = a
  }
    i = i+1
  }
}

function print_array(t){
  siz = size(t)
  var i = 1
  while(i<=siz)
    {
      #log("array0:",t[i])
      i = i+1
    }

}
     
function abs(x)
{
	if ((x>0) or (x==0))
	{return x}
	else 
	{return -x}
}                      